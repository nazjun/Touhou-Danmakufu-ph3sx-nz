#pragma once

#include "../pch.h"

#include "DxConstant.hpp"

namespace directx {
	//*******************************************************************
	//Docs for FVF (Flexible Vertex Format)
	//https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dfvf
	//*******************************************************************

	static const D3DVERTEXELEMENT9 ELEMENTS_TL[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITIONT, 0 },
		{ 0, 16, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		D3DDECL_END()
	};
	struct VERTEX_TL {
		VERTEX_TL() {}
		VERTEX_TL(const D3DXVECTOR4& pos, D3DCOLOR dcol) : position(pos), diffuse_color(dcol) {}
		D3DXVECTOR4 position;
		D3DCOLOR diffuse_color;
		enum { fvf = (D3DFVF_XYZRHW | D3DFVF_DIFFUSE) };
	};

	static const D3DVERTEXELEMENT9 ELEMENTS_TLX[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 16, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		{ 0, 20, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
		D3DDECL_END()
	};
	static const D3DVERTEXELEMENT9 ELEMENTS_TLX_INSTANCED[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 16, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		{ 0, 20, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
		//ARGB Vertex color
		{ 1, 0, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 1 },
		//XYZ Position + X Scale
		{ 1, 4, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 1 },
		//YZ Scale + XY Angle
		{ 1, 20, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 2 },
		//Z angle + extra data
		{ 1, 36, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 3 },
		D3DDECL_END()
	};
	struct VERTEX_TLX {
		VERTEX_TLX() {}
		VERTEX_TLX(const D3DXVECTOR4& pos, D3DCOLOR diffcol, const D3DXVECTOR2& tex) 
			: position(pos), diffuse_color(diffcol), texcoord(tex) {}
		D3DXVECTOR4 position;
		D3DCOLOR diffuse_color;
		D3DXVECTOR2 texcoord;
		enum { fvf = (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1) };
	};
	struct VERTEX_INSTANCE {
		D3DCOLOR diffuse_color;
		D3DXVECTOR4 xyz_pos_x_scale;
		D3DXVECTOR4 yz_scale_xy_ang;
		D3DXVECTOR4 z_ang_extra;
	};

	static const D3DVERTEXELEMENT9 ELEMENTS_L[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 12, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		D3DDECL_END()
	};
	struct VERTEX_L {
		VERTEX_L() {}
		VERTEX_L(const D3DXVECTOR3& pos, D3DCOLOR col) : position(pos), diffuse_color(col) {}
		D3DXVECTOR3 position;
		D3DCOLOR diffuse_color;
		enum { fvf = (D3DFVF_XYZ | D3DFVF_DIFFUSE) };
	};

	static const D3DVERTEXELEMENT9 ELEMENTS_LX[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 12, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		{ 0, 16, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
		D3DDECL_END()
	};
	static const D3DVERTEXELEMENT9 ELEMENTS_LX_INSTANCED[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 12, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
		{ 0, 16, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
		//ARGB Vertex color
		{ 1, 0, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 1 },
		//XYZ Position + X Scale
		{ 1, 4, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 1 },
		//YZ Scale + XY Angle
		{ 1, 20, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 2 },
		//Z angle + extra data
		{ 1, 36, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 3 },
		D3DDECL_END()
	};
	struct VERTEX_LX {
		VERTEX_LX() {}
		VERTEX_LX(const D3DXVECTOR3& pos, D3DCOLOR diffcol, const D3DXVECTOR2& tex) 
			: position(pos), diffuse_color(diffcol), texcoord(tex) {}
		D3DXVECTOR3 position;
		D3DCOLOR diffuse_color;
		D3DXVECTOR2 texcoord;
		enum { fvf = (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1) };
	};

	static const D3DVERTEXELEMENT9 ELEMENTS_N[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_NORMAL, 0 },
		D3DDECL_END()
	};
	struct VERTEX_N {
		VERTEX_N() {}
		VERTEX_N(const D3DXVECTOR3& pos, D3DXVECTOR3& n) : position(pos), normal(n) {}
		D3DXVECTOR3 position;
		D3DXVECTOR3 normal;
		enum { fvf = (D3DFVF_XYZ | D3DFVF_NORMAL) };
	};

	static const D3DVERTEXELEMENT9 ELEMENTS_NX[] = {
		{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
		{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_NORMAL, 0 },
		{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
		D3DDECL_END()
	};
	struct VERTEX_NX {
		VERTEX_NX() {}
		VERTEX_NX(const D3DXVECTOR3& pos, const D3DXVECTOR3& n, const D3DXVECTOR2& tc) 
			: position(pos), normal(n), texcoord(tc) {}
		D3DXVECTOR3 position;
		D3DXVECTOR3 normal;
		D3DXVECTOR2 texcoord;
		enum { fvf = (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1) };
	};
}